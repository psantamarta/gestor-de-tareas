#BlueJ class context
comment0.target=GestorTareas
comment1.params=
comment1.target=GestorTareas()
comment1.text=\r\n\ 01.\ Constructor\ de\ la\ clase\r\n
comment10.params=
comment10.target=void\ imprimeListaTareas()
comment10.text=\r\n\ 10.\ Imprime\ todas\ las\ tareas\ una\ en\ cada\ linea;\ si\ no\ \r\n\ hay\ tareas\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada.\r\n
comment11.params=
comment11.target=java.lang.String\ getListaTareasNumerada()
comment11.text=\r\n\ 11.\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ una\ en\ cada\ l\u00EDnea\ \r\n\ precedida\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa\r\n
comment12.params=
comment12.target=void\ imprimeListaTareasNumerada()
comment12.text=\r\n\ 12.\ Muestra\ todas\ las\ tareas\ una\ en\ cada\ l\u00EDnea\ \r\n\ precedida\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\r\n\ muestra\ unicamente\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada.\r\n
comment13.params=
comment13.target=java.lang.String\ getTareasPosicionImpar()
comment13.text=\r\n\ 13.\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ que\ \r\n\ ocupan\ una\ posicion\ impar,\ una\ en\ cada\ linea\ y\ solo\ el\ texto\ de\ la\ tarea\ y\ sin\ numero\ \r\n\ delante;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa\r\n
comment14.params=
comment14.target=void\ imprimeTareasPosicionImpar()
comment14.text=\r\n\ 14.\ Imprime\ por\ pantalla\ todas\ las\ tareas\ que\ \r\n\ ocupan\ una\ posicion\ impar,\ una\ en\ cada\ linea\ y\ solo\ el\ texto\ de\ la\ tarea\ y\ sin\ numero\ \r\n\ delante;\ si\ no\ hay\ tareas\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada.\r\n
comment15.params=textoABuscar
comment15.target=boolean\ hayTareaConElTexto(java.lang.String)
comment15.text=\r\n\ 15.\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\ contenga\ el\ texto\ indicado\r\n\ como\ parametro\ y\ false\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ con\ bucle\ for-each.\r\n
comment16.params=posicion
comment16.target=boolean\ eliminaTareaEnPosicion(int)
comment16.text=\r\n\ 16.\ Elimina\ la\ tarea\ en\ la\ posicion\ indicada\ como\ par\u00E1metro\ (conforme\ \r\n\ a\ la\ lista\ de\ tareas\ que\ se\ imprime\ por\ pantalla).\ Devuelve\ true\ \r\n\ si\ la\ tarea\ existe\ y\ se\ elimina\ y\ false\ en\ caso\ contrario\r\n
comment17.params=textoABuscar
comment17.target=java.lang.String\ getPrimeraTareaConElTexto(java.lang.String)
comment17.text=\r\n\ 17.\ Devuelve\ un\ String\ conteniendo\ la\ primera\ tarea\ que\ contenga\ el\ texto\ indicado\ como\ \r\n\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\ coincidencia\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\r\n\ hacerlo\ con\ un\ bucle\ for-each.\r\n
comment18.params=textoABuscar
comment18.target=void\ imprimePrimeraTareaConElTexto(java.lang.String)
comment18.text=\r\n\ 18.\ Imprime\ por\ pantalla\ la\ primera\ tarea\ que\ contenga\ el\ texto\ indicado\ como\ \r\n\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\ coincidencia\ imprime\ una\ linea\ en\ blanco.\ El\r\n\ metodo\ no\ devuelve\ nada.\ Hay\ que\ hacerlo\ con\ un\ bucle\ for-each.\r\n
comment19.params=textoABuscar
comment19.target=java.lang.String\ getTareasConElTexto(java.lang.String)
comment19.text=\r\n\ 19.\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\ contienen\ el\ texto\ indicado\r\n\ como\ parametro,\ una\ en\ cada\ linea.\ El\ String\ devuelto\ contiene\ una\ ultima\ linea\ adicional\r\n\ que\ indica\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\ "No\ se\ encontraron\ coincidencias"\r\n\ si\ no\ hay\ ninguna\ que\ contenga\ el\ texto\ buscado\r\n
comment2.params=textoTarea
comment2.target=void\ agregarTarea(java.lang.String)
comment2.text=\r\n\ 02.\ Agrega\ una\ tarea\ a\ la\ lista\ de\ tareas\ pendientes\r\n
comment20.params=textoABuscar
comment20.target=void\ imprimeTareasConElTexto(java.lang.String)
comment20.text=\r\n\ 20.\ Muestra\ por\ pantalla\ todas\ las\ tareas\ que\ contienen\ el\ texto\ indicado\r\n\ como\ parametro,\ una\ en\ cada\ linea.\ Se\ imprime\ una\ ultima\ linea\ adicional\r\n\ que\ indica\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\ "No\ se\ encontraron\ coincidencias"\r\n\ si\ no\ hay\ ninguna\ que\ contenga\ el\ texto\ buscado\r\n
comment21.params=
comment21.target=java.lang.String\ getTodasLasTareasWhile()
comment21.text=\r\n\ 21.\ Devuelve\ todas\ las\ tareas\ cada\ una\ en\ una\ linea;\ si\ no\ \r\n\ hay\ tareas\ devuelve\ la\ cadena\ vacia\ (usando\ un\ bucle\ while)\r\n
comment22.params=
comment22.target=void\ imprimeTodasLasTareasWhile()
comment22.text=\r\n\ 22.\ Imprime\ por\ pantalla\ todas\ las\ tareas\ una\ en\ cada\ l\u00EDnea\ utilizando\ el\ metodo\ anterior.\r\n\ si\ no\ hay\ tareas\ muestra\ unicamente\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada.\r\n
comment23.params=numeroTareas
comment23.target=java.lang.String\ getPrimerasTareas(int)
comment23.text=\r\n\ 23.\ Devuelve\ un\ String\ oonteniendo\ las\ primeras\ n\ tareas\ (siendo\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea.\ En\r\n\ caso\ de\ que\ no\ haya\ suficientes\ se\ devuelven\ solo\ las\ que\ haya.\ En\ caso\ de\ no\ haber\ tareas\r\n\ se\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment24.params=numeroTareas
comment24.target=void\ imprimePrimerasTareas(int)
comment24.text=\r\n\ 24.\ Imprime\ por\ pantalla\ las\ primeras\ n\ tareas\ (siendo\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea.\ En\r\n\ caso\ de\ que\ no\ haya\ suficientes\ se\ imprimen\ solo\ las\ que\ haya.\ En\ caso\ de\ no\ haber\ tareas\r\n\ se\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada\ y\ debe\ usar\ el\ m\u00E9todo\ anterior\r\n
comment25.params=textoABuscar
comment25.target=boolean\ hayTareaConElTextoEficiente(java.lang.String)
comment25.text=\ \ \ \ \r\n\ 25.\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\ contenga\ el\ texto\ indicado\r\n\ como\ par\u00E1metro\ y\ false\ en\ caso\ contrario.\ El\ metodo\ se\ debe\ ejecutar\ de\ la\r\n\ forma\ mas\ rapida\ posible\r\n
comment26.params=textoABuscar
comment26.target=boolean\ eliminaPrimeraTareaCoincidente(java.lang.String)
comment26.text=\r\n\ 26.\ Elimina\ la\ primera\ tarea\ que\ contiene\ el\ texto\ indicado\ por\ par\u00E1metro.\ Devuelve\ true\r\n\ si\ elimino\ una\ tarea\ o\ false\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ lo\ mas\ eficiente\ posible\r\n
comment27.params=texto
comment27.target=int\ eliminaTareasConElTexto(java.lang.String)
comment27.text=\r\n\ 27.\ Elimina\ todas\ las\ tareas\ que\ contienen\ un\ texto\ pasado\ como\ parametro.\ Devuelve\r\n\ el\ numero\ de\ tareas\ eliminadas.\ Hay\ que\ hacerlo\ con\ un\ bucle\ while\r\n
comment28.params=texto
comment28.target=int\ eliminaTareasConElTextoFor(java.lang.String)
comment28.text=\r\n\ 28.\ Elimina\ todas\ las\ tareas\ que\ contienen\ un\ texto\ pasado\ como\ parametro.\ Devuelve\r\n\ el\ numero\ de\ tareas\ eliminadas.\ Hay\ que\ hacerlo\ con\ un\ bucle\ for-each\r\n
comment29.params=posicionTarea
comment29.target=boolean\ marcaComoCompletada(int)
comment29.text=\r\n\ 29.\ Marca\ como\ completada\ la\ tarea\ que\ ocupa\ la\ posicion\ indicada\ como\ parametro\ y\ devuelve\r\n\ true\ si\ pudo\ realizar\ la\ operacion\ o\ false\ en\ caso\ contrario\ (se\ entiende\ que\ una\ tarea\r\n\ que\ ya\ esta\ completada\ no\ se\ puede\ volver\ a\ marcar\ como\ completada).\ Importantisimo\:\r\n\ no\ se\ puede\ cambiar\ bajo\ ning\u00FAn\ concepto\ el\ texto\ de\ la\ tarea\ (la\ descripcion\ de\ la\ \r\n\ tarea)\r\n
comment3.params=
comment3.target=java.lang.String\ getTareas()
comment3.text=\r\n\ 03.\ Devuelve\ todas\ las\ tareas\ en\ una\ sola\ linea\ separadas\ por\ comas\r\n\ y\ con\ corchetes\ al\ principio\ y\ al\ final;\ si\ no\ hay\ tareas\ devuelve\r\n\ la\ cadena\ vacia\r\n
comment30.params=
comment30.target=java.lang.String\ getListaTareasCompletadasYNoCompletadas()
comment30.text=\r\n\ 30.\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ indicando\ si\ esta\ pendiente\ con\ el\ texto\ "[\ ]"\ o\ si\ no\r\n\ esta\ pendiente\ con\ el\ texto\ "[x]"\ delante\ del\ texto\ de\ la\ tarea\ y\ luego\ un\ espacio\r\n\ (por\ ejemplo\ "1.\ [x]\ Hacer\ la\ cama");\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
comment31.params=
comment31.target=void\ imprimeListaTareasCompletadasYNoCompletadas()
comment31.text=\r\n\ 31.\ Imprime\ por\ pantalla\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ indicando\ si\ esta\ pendiente\ con\ el\ texto\ "[\ ]"\ o\ si\ no\r\n\ esta\ pendiente\ con\ el\ texto\ "[x]"\ delante\ del\ texto\ de\ la\ tarea\ y\ luego\ un\ espacio\r\n\ (por\ ejemplo\ "1.\ [x]\ Hacer\ la\ cama");\ si\ no\ hay\ tareas\ imrpime\ una\ l\u00EDnea\ en\ blanco.\ El\ metodo\ no\r\n\ dvuelve\ nada.\r\n
comment32.params=
comment32.target=java.lang.String\ getListaTareasCompletadasYNoCompletadasConPrioridad()
comment32.text=\r\n\ 32.\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ indicando\ si\ esta\ pendiente\ con\ el\ texto\ "[\ ]"\ o\ si\ no\r\n\ esta\ pendiente\ con\ el\ texto\ "[x]"\ delante\ del\ texto\ de\ la\ tarea\ y\ luego\ un\ espacio\r\n\ (por\ ejemplo\ "1.\ [x]\ Hacer\ la\ cama");\ adem\u00E1s\ muestra\ la\ prioridad\ de\ la\ tarea\ al\ final\ de\ la\ linea\r\n\ separada\ por\ un\ espacio\ de\ la\ descripcion\ de\ la\ tarea;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
comment33.params=posicionTarea\ prioridad
comment33.target=void\ setPrioridad(int,\ int)
comment33.text=\r\n\ 33.\ Cambia\ la\ prioridad\ de\ la\ tarea\ que\ ocupa\ la\ posicion\ indicada\ segun\ el\ listado\ del\r\n\ metodo\ anterior\ al\ valor\ indicado\ .\ Si\ no\ es\ un\ valor\ legal\ para\ las\ prioridades\ (de\ 1\ a\ 5)\ o\ no\ es\r\n\ una\ posicion\ valida,\ la\ prioridad\ se\ queda\ como\ esta\r\n
comment34.params=
comment34.target=java.lang.String\ getTareaMasPrioritaria()
comment34.text=\r\n\ 34.\ Devuelve\ todos\ los\ datos\ de\ la\ tarea\ con\ mayor\ prioridad.\ Si\ hay\ empate,\r\n\ devuelve\ la\ \u00FAltima\ encontrada.\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
comment35.params=
comment35.target=java.lang.String\ getTareasPorPrioridad()
comment35.text=\r\n\ 35.\ Devuelve\ las\ descripciones\ de\ las\ tareas\ junto\ con\ su\ prioridad\ ordenadas\ por\ \r\n\ prioridad,\ una\ en\ cada\ linea.\ Salen\ primero\ las\ tareas\ con\ mayor\ prioridad\r\n
comment36.params=
comment36.target=void\ muestraListadoTareasEnFormaRara()
comment36.text=\r\n\ 36.\ Imprime\ por\ pantalla\ las\ tarea\ de\ una\ forma\ muy\ rara...\r\n
comment37.params=posicion\ dia\ mes\ ano
comment37.target=void\ fijarFechaTope(int,\ int,\ int,\ int)
comment37.text=\r\n\ 37.\ Fija\ una\ fecha\ limite\ para\ la\ tarea\ cuyo\ posicion\ nos\ indican.\ El\r\n\ ano\ se\ especifica\ con\ 4\ digitos\ (por\ ejemplo,\ 2019)\r\n
comment38.params=
comment38.target=java.lang.String\ getListaTareasConFechaVencimiento()
comment38.text=\r\n\ 38.\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ indicando\ su\ posicion\ y\r\n\ la\ fecha\ de\ vecimiento\ en\ formato\ DD/MM/YYYY.\ Por\ ejemplo,\ una\ tarea\ se\ mostraria\r\n\ "1.\ Hacer\ la\ cama\ -\ 21/01/2019";\ si\ no\ hay\ fecha\ de\ vencimiento\ la\ ultima\ \r\n\ parte\ no\ se\ muestra;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
comment4.params=
comment4.target=void\ mostrarTareas()
comment4.text=\r\n\ 04.\ Imprime\ todas\ las\ tareas\ en\ una\ sola\ linea;\ si\ no\ \r\n\ hay\ tareas\ imprime\ una\ linea\ en\ blanco\r\n
comment5.params=
comment5.target=int\ getNumeroTareasPendientes()
comment5.text=\r\n\ 05.\ Devuelve\ el\ n\u00FAmero\ de\ tareas\r\n
comment6.params=
comment6.target=void\ muestraTareaMasVieja()
comment6.text=\ \r\n\ 06.\ Muestra\ por\ pantalla\ la\ tarea\ mas\ antigua\r\n\ Si\ el\ gestor\ no\ tiene\ tareas,\ no\ hace\ nada.\ \r\n
comment7.params=
comment7.target=java.lang.String\ getTareaMasVieja()
comment7.text=\r\n\ 07.\ Devuelve\ la\ tarea\ mas\ antigua;\ si\ no\ hay\ tareas\ \r\n\ devuelve\ la\ cadena\ vacia\r\n
comment8.params=
comment8.target=void\ eliminaTareaMasVieja()
comment8.text=\r\n\ 08.\ Elimina\ la\ tarea\ mas\ antigua\r\n\ Si\ el\ gestor\ no\ tiene\ tareas,\ no\ hace\ nada.\ \r\n
comment9.params=
comment9.target=java.lang.String\ getListaTareas()
comment9.text=\r\n\ 09.\ Devuelve\ todas\ las\ tareas\ una\ en\ cada\ linea;\ si\ no\ \r\n\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
numComments=39
